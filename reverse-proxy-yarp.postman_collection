{
	"info": {
		"_postman_id": "84efcdb9-c3f0-4edf-af5b-5d97999ecad5",
		"name": "docker reverse proxy yarp",
		"description": "YARP (which stands for "Yet Another Reverse Proxy") is a project to create a reverse proxy server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18801357"
	},
	"item": [
		{
			"name": "get direct from services",
			"item": [
				{
					"name": "get users from user.api (https)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each user should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('login');\r",
									"            pm.expect(user).to.have.property('email');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.login).to.not.empty;\r",
									"            pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{users_api_https_url}}/users",
							"host": [
								"{{users_api_https_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get users from user.api (http)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each user should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('login');\r",
									"            pm.expect(user).to.have.property('email');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.login).to.not.empty;\r",
									"            pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{users_api_http_url}}/users",
							"host": [
								"{{users_api_http_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get roles from role.api (https)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each role should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('name');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.name).to.not.empty;\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{roles_api_https_url}}/roles",
							"host": [
								"{{roles_api_https_url}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "get roles from role.api (http)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each role should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('name');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.name).to.not.empty;\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{roles_api_http_url}}/roles",
							"host": [
								"{{roles_api_http_url}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get via proxy",
			"item": [
				{
					"name": "get users via proxy (https)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each user should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('login');\r",
									"            pm.expect(user).to.have.property('email');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.login).to.not.empty;\r",
									"            pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{proxy_api_https_url}}/users-api/users",
							"host": [
								"{{proxy_api_https_url}}"
							],
							"path": [
								"users-api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get users via proxy (http)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each user should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('login');\r",
									"            pm.expect(user).to.have.property('email');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.login).to.not.empty;\r",
									"            pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{proxy_api_http_url}}/users-api/users",
							"host": [
								"{{proxy_api_http_url}}"
							],
							"path": [
								"users-api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get roles via proxy (https)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each role should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('name');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.name).to.not.empty;\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{proxy_api_https_url}}/roles-api/roles",
							"host": [
								"{{proxy_api_https_url}}"
							],
							"path": [
								"roles-api",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "get roles via proxy (http)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code should by 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header should by application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').but.not.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should by an not-empty array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test('Each role should contain required fields', function () {\r",
									"    const response = pm.response.json();\r",
									"    if (response && response.length) {\r",
									"        response.forEach(function (user) {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('name');\r",
									"            pm.expect(user.id).to.greaterThan(0);\r",
									"            pm.expect(user.name).to.not.empty;\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should by less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{proxy_api_http_url}}/roles-api/roles",
							"host": [
								"{{proxy_api_http_url}}"
							],
							"path": [
								"roles-api",
								"roles"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "users_api_http_url",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "users_api_https_url",
			"value": "https://localhost:3101",
			"type": "string"
		},
		{
			"key": "roles_api_http_url",
			"value": "http://localhost:4001",
			"type": "string"
		},
		{
			"key": "roles_api_https_url",
			"value": "https://localhost:4101",
			"type": "string"
		},
		{
			"key": "proxy_api_http_url",
			"value": "http://localhost:5001",
			"type": "string"
		},
		{
			"key": "proxy_api_https_url",
			"value": "https://localhost:5101",
			"type": "string"
		}
	]
}